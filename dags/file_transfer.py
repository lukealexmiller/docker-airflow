def diff_directories(*args, **kwargs):
    """Compare two directories which are passed by the task and return a list
       of file paths which have a specific extension and are unique to the 
       source directory.
    """
    source_dir = kwargs["source_location"]
    logging.info('Accessing source directory at: {}'.format(source_dir))
    target_dir = kwargs["target_location"]
    logging.info('Accessing target directory at: {}'.format(target_dir))

    valid_extension = kwargs["extension"]
    ignore_dirs = kwargs["ignore_location"]

    # Get flattened list of all files in source and target dirs and their subdirectories
    source_dir_files = list_files(**{'source_location':source_dir})
    source_dir_files = [file.replace(source_dir+"/","") for file in source_dir_files]
    [logging.info("{}".format(file)) for file in source_dir_files] #TODO: Remove
    
    target_dir_files = list_files(**{'source_location':target_dir})
    target_dir_files = [file.replace(target_dir+"/","") for file in target_dir_files]
    [logging.info("{}".format(file)) for file in target_dir_files] # TODO: Remove

    # Filter for files which are unique to the source dir
    logging.info('Filtering for files unique to source directory')
    source_dir_files_unique = list(set(source_dir_files).difference(target_dir_files))
    logging.info('Number of unique files: {}'.format(len(source_dir_files_unique)))

    # Filter for files with correct extension
    logging.info('Filtering for files with extension: {}'.format(valid_extension))
    source_dir_files_unique = [file for file in source_dir_files_unique if file.endswith(valid_extension)]
    logging.info('Number of passing files: {}'.format(len(source_dir_files_unique)))

    # Filter out files in the ignore dirs
    logging.info('Filtering out files in ignored directory: {}'.format(','.join(ignore_dirs)))
    source_dir_files_unique = [file for ignore_dir in ignore_dirs for file in source_dir_files_unique if ignore_dir not in file]
    logging.info('Number of passing files: {}'.format(len(source_dir_files_unique)))
    
    return source_dir_files_unique

def move_files(*args, **kwargs):
    """Move files from source directory to target directory. The list of files
       which are to be moved are generated by diff_directories and are pulled 
       in to the function as a list using XCOM from a user-defined task_id.
       TODO: Empty directories are not deleted.
    """
    source_dir = kwargs["source_location"]
    logging.info('Accessing source directory at: {}'.format(source_dir))
    target_dir = kwargs["target_location"]
    logging.info('Accessing target directory at: {}'.format(target_dir))
    task_id = kwargs["task_id"]

    ti = kwargs['task_instance']
    files_to_move = ti.xcom_pull(task_ids=task_id)
    logging.info("Number of files to move: {}".format(len(files_to_move)))

    # Move files from source dir which do not currently exist on target dir
    [copy_and_delete_files(source_dir,target_dir,file) for file in files_to_move]
    logging.info("File transfer complete")
